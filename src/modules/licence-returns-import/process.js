'use strict'

const { currentTimeInNanoseconds, calculateAndLogTimeTaken } = require('../../lib/general.js')
const PersistReturns = require('./lib/persist-returns.js')
const TransformReturns = require('./lib/transform-returns.js')
const VoidReturns = require('./lib/void-returns.js')

async function go (licence, returnCycles, log = false) {
  const messages = []

  try {
    const startTime = currentTimeInNanoseconds()

    const returns = await TransformReturns.go(licence.LIC_NO)

    if (returns.length > 0) {
      await PersistReturns.go(returns, returnCycles)

      // Void return logs that no longer match to those generated by this import
      await VoidReturns.go(licence.LIC_NO, returns)
    }

    if (log) {
      calculateAndLogTimeTaken(startTime, 'licence-returns-import: complete')
    }
  } catch (error) {
    global.GlobalNotifier.omfg('licence-returns-import: errored', { licence }, error)

    messages.push(error.message)
  }

  return messages
}

module.exports = {
  go
}
