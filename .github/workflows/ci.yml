name: CI

on:
  push:
    branches:
      - '**'
      - '!dependabot/**'

jobs:
  base-node-pipeline:
    uses: DEFRA/water-abstraction-orchestration/.github/workflows/base-node-pipeline.yml@develop
    with:
      serviceName: DEFRA_water-abstraction-import
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  docker-build-and-push-image:
    uses: DEFRA/water-abstraction-orchestration/.github/workflows/docker.yml@develop
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.x, 16.x ]
    name: Test  - Node.js ${{ matrix.node-version }}
    env:
      # These need to be duplicated in services section for postgres. Unfortunately, there is not a way to reuse them
      PGUSER: water_user
      PGHOST: localhost
      PGPASSWORD: password
      PGPORT: 5432
      PGDATABASE: permits
      ENVIRONMENT: dev
      DATABASE_URL: postgres://water_user:password@localhost:5432/permits
      JWT_SECRET: secret
      JWT_TOKEN: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNH0.MOREC6-Kszb9bDFw0O1UKywpnkcP-c5cPjASMpjk8Po
      NOTIFY_KEY: somerealnotifykey-00000000-0000-0000-0000-000000000000-00000000-0000-0000-0000-000000000000
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:10-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: water_user
          POSTGRES_DB: permits
          POSTGRES_PASSWORD: password
        # Maps tcp port 5432 on service container to the host
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started. You must have this so the runner knows to wait till
        # postgres is up and running before proceeding
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install node modules
        run: |
          npm ci
      - name: Create database
        run: |
          PGPASSWORD=password psql -U water_user -tc "SELECT 'CREATE DATABASE water' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'water_user')"
      - name: Run database migrations
        run: |
          npm run migrate
      - name: Test
        run:
          npm run test:ci
